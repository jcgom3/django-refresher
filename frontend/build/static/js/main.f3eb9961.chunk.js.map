{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","todoList","setTodoList","_useState3","id","title","completed","_useState4","activeItem","setActiveItem","_useState5","_useState6","editing","setEditing","useEffect","fetchTasks","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","concat","decodeURIComponent","console","log","fetch","then","response","json","data","React","createElement","className","style","display","justifyContent","marginTop","onSubmit","e","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","flex","onChange","target","value","_objectSpread","type","placeholder","map","task","index","key","onClick","strikeUnstrike","startEdit","deleteItem","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPA6LeA,MA1Lf,WACE,IAAAC,EAAgCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,EAAoCL,mBAAS,CAC3CM,GAAI,KACJC,MAAO,GACPC,WAAW,IACXC,EAAAP,YAAAG,EAAA,GAJKK,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAKhCG,EAA8BZ,oBAAS,GAAMa,EAAAX,YAAAU,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAE1BG,qBAAU,WACRC,MACC,IAEH,IAAMC,EAAY,SAACC,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE9B,IADA,IAAMC,EAAUF,SAASC,OAAOE,MAAM,KAC7BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACvC,IAAMH,EAASC,EAAQE,GAAGE,OAC1B,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAE,GAAAG,OAAQV,EAAI,KAAK,CACvDC,EAAcU,mBAAmBR,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIN,OAAON,GAGHH,EAAa,WACjBc,QAAQC,IAAI,eAEZC,MAAM,wCACHC,MAAK,SAACC,GAAQ,OAAKA,EAASC,UAC5BF,MAAK,SAACG,GAAI,OAAKjC,EAAYiC,OAuFhC,OACEC,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,MAAIE,MAAO,CAACC,QAAS,OAAQC,eAAe,SAAUC,UAAW,KAAK,qBACtEN,IAAAC,cAAA,OAAKjC,GAAG,kBACNgC,IAAAC,cAAA,OAAKjC,GAAG,gBACNgC,IAAAC,cAAA,QAAMM,SA7EO,SAACC,GACpBA,EAAEC,iBACFhB,QAAQC,IAAI,QAAStB,GAErB,IAAMsC,EAAY9B,EAAU,aAExB+B,EAAM,yCAENnC,IACFmC,EAAG,yCAAApB,OAA4CnB,EAAWJ,GAAE,KAC5DS,GAAW,IAGbkB,MAAMgB,EAAK,CACTC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeH,GAEjBI,KAAMC,KAAKC,UAAU5C,KAEpBwB,MAAK,WACJjB,IACAN,EAAc,CACZL,GAAI,KACJC,MAAO,GACPC,WAAW,OAGd+C,OAAM,SAACC,GACNzB,QAAQC,IAAI,SAAUwB,OA+CUlD,GAAG,QAC/BgC,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,OAAKE,MAAO,CAAEgB,KAAM,IAClBnB,IAAAC,cAAA,SACEmB,SA7FK,SAACZ,GACpB,IAAM3B,EAAO2B,EAAEa,OAAOxC,KAChByC,EAAQd,EAAEa,OAAOC,MACvB7B,QAAQC,IAAI,QAASb,GACrBY,QAAQC,IAAI,SAAU4B,GAEtBjD,EAAakD,wBAAC,GACTnD,GAAU,IACbH,MAAOqD,MAsFKpB,UAAU,eACVlC,GAAG,QACHsD,MAAOlD,EAAWH,MAClBuD,KAAK,OACL3C,KAAK,QACL4C,YAAY,gBAIhBzB,IAAAC,cAAA,OAAKE,MAAO,CAAEgB,KAAM,IAClBnB,IAAAC,cAAA,SACEjC,GAAG,SACHkC,UAAU,kBACVsB,KAAK,SACL3C,KAAK,YAOfmB,IAAAC,cAAA,OAAKjC,GAAG,gBACLH,EAAS6D,KAAI,SAACC,EAAMC,GAAK,OACxB5B,IAAAC,cAAA,OAAK4B,IAAKD,EAAO1B,UAAU,6BACzBF,IAAAC,cAAA,OAAK6B,QAAS,kBArDH,SAACH,GACtBA,EAAKzD,WAAayD,EAAKzD,UACvB,IAAMwC,EAAY9B,EAAU,aACtB+B,EAAG,yCAAApB,OAA4CoC,EAAK3D,GAAE,KAE5D2B,MAAMgB,EAAK,CACTC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeH,GAEjBI,KAAMC,KAAKC,UAAU,CAAE9C,UAAWyD,EAAKzD,UAAWD,MAAO0D,EAAK1D,UAC7D2B,MAAK,WACNjB,OAGFc,QAAQC,IAAI,OAAQiC,EAAKzD,WAqCK6D,CAAeJ,IAAOxB,MAAO,CAAEgB,KAAM,KACnC,IAAnBQ,EAAKzD,UACJ8B,IAAAC,cAAA,YAAO0B,EAAK1D,OAEZ+B,IAAAC,cAAA,cAAS0B,EAAK1D,QAIlB+B,IAAAC,cAAA,OAAKE,MAAO,CAAEgB,KAAM,IAClBnB,IAAAC,cAAA,UACE6B,QAAS,kBAlFP,SAACH,GACjBtD,EAAcsD,GACdlD,GAAW,GAgFkBuD,CAAUL,IACzBzB,UAAU,kCACX,SAKHF,IAAAC,cAAA,OAAKE,MAAO,CAAEgB,KAAM,IAClBnB,IAAAC,cAAA,UACE6B,QAAS,kBAtFN,SAACH,GAClB,IAAMjB,EAAY9B,EAAU,aAE5Be,MAAM,yCAADJ,OAA0CoC,EAAK3D,GAAE,KAAK,CACzD4C,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAeH,KAEhBd,MAAK,WACNjB,OA4E2BsD,CAAWN,IAC1BzB,UAAU,sCACX,cCtKGgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,IAAAC,cAACzC,EAAG,MAAKuB,SAAS0D,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAM6B,c","file":"static/js/main.f3eb9961.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [activeItem, setActiveItem] = useState({\n    id: null,\n    title: \"\",\n    completed: false,\n  });\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === `${name}=`) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n\n  const fetchTasks = () => {\n    console.log(\"Fetching...\");\n\n    fetch(\"http://127.0.0.1:8000/api/task-list/\")\n      .then((response) => response.json())\n      .then((data) => setTodoList(data));\n  };\n\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(\"Name:\", name);\n    console.log(\"Value:\", value);\n\n    setActiveItem({\n      ...activeItem,\n      title: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"ITEM:\", activeItem);\n\n    const csrftoken = getCookie(\"csrftoken\");\n\n    let url = \"http://127.0.0.1:8000/api/task-create/\";\n\n    if (editing) {\n      url = `http://127.0.0.1:8000/api/task-update/${activeItem.id}/`;\n      setEditing(false);\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(activeItem),\n    })\n      .then(() => {\n        fetchTasks();\n        setActiveItem({\n          id: null,\n          title: \"\",\n          completed: false,\n        });\n      })\n      .catch((error) => {\n        console.log(\"ERROR:\", error);\n      });\n  };\n\n  const startEdit = (task) => {\n    setActiveItem(task);\n    setEditing(true);\n  };\n\n  const deleteItem = (task) => {\n    const csrftoken = getCookie(\"csrftoken\");\n\n    fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n    }).then(() => {\n      fetchTasks();\n    });\n  };\n\n  const strikeUnstrike = (task) => {\n    task.completed = !task.completed;\n    const csrftoken = getCookie(\"csrftoken\");\n    const url = `http://127.0.0.1:8000/api/task-update/${task.id}/`;\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify({ completed: task.completed, title: task.title }),\n    }).then(() => {\n      fetchTasks();\n    });\n\n    console.log(\"TASK\", task.completed);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 style={{display: 'flex', justifyContent:'center', marginTop: 40}}>Django-React Todo</h1>\n      <div id=\"task-container\">\n        <div id=\"form-wrapper\">\n          <form onSubmit={handleSubmit} id=\"form\">\n            <div className=\"flex-wrapper\">\n              <div style={{ flex: 6 }}>\n                <input\n                  onChange={handleChange}\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={activeItem.title}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Add task..\"\n                />\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <input\n                  id=\"submit\"\n                  className=\"btn btn-warning\"\n                  type=\"submit\"\n                  name=\"Add\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div id=\"list-wrapper\">\n          {todoList.map((task, index) => (\n            <div key={index} className=\"task-wrapper flex-wrapper\">\n              <div onClick={() => strikeUnstrike(task)} style={{ flex: 7 }}>\n                {task.completed === false ? (\n                  <span>{task.title}</span>\n                ) : (\n                  <strike>{task.title}</strike>\n                )}\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <button\n                  onClick={() => startEdit(task)}\n                  className=\"btn btn-sm btn-outline-warning\"\n                >\n                  Edit\n                </button>\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <button\n                  onClick={() => deleteItem(task)}\n                  className=\"btn btn-sm btn-outline-dark delete\"\n                >\n                  -\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}